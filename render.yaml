services:
  - type: web
    name: blivhort-ai
    env: node
    rootDir: .
    buildCommand: |
      set -e
      export PYTHONPATH="$PWD/python_packages"
      mkdir -p python_packages
      python3 -m pip install --no-cache-dir --no-warn-script-location --target python_packages setuptools==70.0.0 packaging wheel || true
      PUPPETEER_SKIP_DOWNLOAD=true npm install --no-audit --no-fund
      npm rebuild better-sqlite3 --update-binary || true
      # Disable source builds on Render since distutils may be missing; prefer prebuilt
      :
      if [ -f requirements.txt ]; then \
        python3 -m pip install --no-cache-dir --no-warn-script-location --prefer-binary --only-binary=:all: --target python_packages -r requirements.txt; \
      else \
        echo 'No Python requirements.txt found, skipping'; \
      fi
    startCommand: >
      bash -lc "echo '[Render] Starting application...' &&
      echo '[Render] Current directory: $(pwd)' &&
      echo '[Render] Disk mount check:' && ls -la /opt/render/project/src/fetcher/ || true &&
      mkdir -p data/uploads tmp &&
      rm -rf uploads &&
      ln -s data/uploads uploads || true &&
      if node -v | grep -q '^v20\.'; then
        echo Using system Node: $(node -v) && node server.js;
      else
        echo 'Downloading Node 20 runtimeâ€¦' &&
        cd tmp && NODEV=20.19.4 && curl -fsSL https://nodejs.org/dist/v$NODEV/node-v$NODEV-linux-x64.tar.xz -o node20.tar.xz &&
        mkdir -p node20 && tar -xJf node20.tar.xz --strip-components=1 -C node20 && cd .. &&
        ./tmp/node20/bin/node -v && ./tmp/node20/bin/node server.js;
      fi"
    healthCheckPath: /healthz
    envVars:
      - key: NODE_ENV
        value: production
      - key: NODE_VERSION
        value: 20.19.4
      - key: NPM_CONFIG_BUILD_FROM_SOURCE
        value: "false"
      - key: PIP_USER
        value: "0"
      - key: PYTHONPATH
        value: "/opt/render/project/src/fetcher/python_packages:/opt/render/project/src/python_packages"
      - key: PIP_ONLY_BINARY
        value: ":all:"
      - key: PIP_PREFER_BINARY
        value: "1"
      - key: SETUPTOOLS_USE_DISTUTILS
        value: "local"
      - key: ALLOW_RUNTIME_SQLITE_REBUILD
        value: "0"
      - key: YARN_ENABLE_IMMUTABLE_INSTALLS
        value: "false"
      - key: OPENAI_API_KEY
        sync: false
      - key: MODEL_ID
        value: gpt-5
      - key: PYTHON_BIN
        value: python3
      - key: PUPPETEER_SKIP_DOWNLOAD
        value: "true"
      - key: PUPPETEER_SKIP_CHROMIUM_DOWNLOAD
        value: "true"
      - key: NODE_OPTIONS
        value: "--enable-source-maps --max-old-space-size=768"
      - key: NEXT_DATA_MAX_BYTES
        value: "2500000"
      - key: WARM_CONCURRENCY
        value: "1"
      - key: PUBLIC_URL
        value: "https://blivhort-ai.onrender.com"
      - key: PERSIST_PREFER
        value: "true"
      - key: PERSIST_ALWAYS_WRITE
        value: "true"
      - key: WARM_ALL_ON_START
        value: "true"
      - key: WARM_MAX_HEARINGS
        value: "0"
      - key: WARM_RETRY_ATTEMPTS
        value: "2"
      - key: INTERNAL_API_TIMEOUT_MS
        value: "1500000"
      - key: DISABLE_SEARCH_REMOTE_BACKFILL
        value: "true"
      - key: INDEX_REFRESH_MS
        value: "21600000"
      - key: CRON_ENABLED
        value: "1"
      - key: CRON_INDEX_SCHEDULE
        value: "0 */6 * * *"
      - key: CRON_HEARING_REFRESH
        value: "*/30 * * * *"
      - key: SESSION_SECRET
        generateValue: true
      - key: DB_PATH
        value: "/opt/render/project/src/fetcher/data/app.sqlite"
    disks:
      - name: app-data
        mountPath: /opt/render/project/src/fetcher/data
        sizeGB: 1

jobs:
  - type: cron
    name: blivhort-ai-hearing-refresh
    env: node
    schedule: "*/30 * * * *"
    buildCommand: |
      set -e
      export PYTHONPATH="$PWD/python_packages"
      mkdir -p python_packages
      python3 -m pip install --no-cache-dir --no-warn-script-location --target python_packages setuptools==70.0.0 packaging wheel || true
      PUPPETEER_SKIP_DOWNLOAD=true npm install --no-audit --no-fund
      npm rebuild better-sqlite3 --update-binary || true
    command: |
      cd /opt/render/project/src && \
      node -e "
      const axios = require('axios');
      const fs = require('fs');
      const path = require('path');
      
      console.log('[JOB] Starting hearing refresh job...');
      
      // Initialize database
      const { init: initDb, db: sqliteDb } = require('./db/sqlite');
      try {
        initDb();
        console.log('[JOB] Database initialized');
      } catch (e) {
        console.error('[JOB] Database init failed:', e);
        process.exit(1);
      }
      
      async function refreshHearings() {
        try {
          // First warm the index
          console.log('[JOB] Warming hearing index...');
          const baseApi = 'https://blivhoert.kk.dk/api/hearing';
          let page = 1;
          const pageSize = 50;
          const collected = [];
          
          for (;;) {
            const url = \`\${baseApi}?PageIndex=\${page}&PageSize=\${pageSize}\`;
            const r = await axios.get(url, { validateStatus: () => true });
            if (r.status !== 200 || !r.data) break;
            const items = Array.isArray(r.data?.data) ? r.data.data : [];
            if (items.length === 0) break;
            collected.push(...items);
            page++;
          }
          
          console.log(\`[JOB] Found \${collected.length} hearings\`);
          
          // Update database
          if (sqliteDb && sqliteDb.prepare) {
            for (const h of collected) {
              try {
                sqliteDb.prepare('INSERT OR REPLACE INTO hearings(id, title, start_date, deadline, status, updated_at) VALUES (?,?,?,?,?,?)').run(
                  h.id, h.title, h.startDate, h.deadline, h.status, Date.now()
                );
              } catch (e) {
                console.error(\`[JOB] Failed to upsert hearing \${h.id}:\`, e.message);
              }
            }
          }
          
          // Refresh pending hearings
          const pendingHearings = sqliteDb.prepare(\`
            SELECT id FROM hearings 
            WHERE archived IS NOT 1 
            AND LOWER(status) LIKE '%afventer konklusion%'
            ORDER BY updated_at ASC
            LIMIT 20
          \`).all();
          
          console.log(\`[JOB] Found \${pendingHearings.length} pending hearings to refresh\`);
          
          const base = process.env.PUBLIC_URL || 'https://blivhort-ai.onrender.com';
          for (const hearing of pendingHearings) {
            try {
              const resp = await axios.post(\`\${base}/api/prefetch/\${hearing.id}?apiOnly=1\`, 
                { reason: 'cron_refresh' }, 
                { validateStatus: () => true, timeout: 60000 }
              );
              console.log(\`[JOB] Refreshed hearing \${hearing.id}: \${resp.status}\`);
              await new Promise(resolve => setTimeout(resolve, 2000)); // Rate limit
            } catch (e) {
              console.error(\`[JOB] Failed to refresh hearing \${hearing.id}:\`, e.message);
            }
          }
          
          console.log('[JOB] Hearing refresh completed');
        } catch (e) {
          console.error('[JOB] Refresh failed:', e);
          process.exit(1);
        }
      }
      
      refreshHearings().then(() => process.exit(0)).catch(e => {
        console.error('[JOB] Fatal error:', e);
        process.exit(1);
      });
      "
    envVars:
      - key: NODE_ENV
        value: production
      - key: DB_PATH
        value: "/opt/render/project/src/fetcher/data/app.sqlite"
      - key: RENDER
        value: "true"
      - key: PUBLIC_URL
        value: "https://blivhort-ai.onrender.com"
      - key: PYTHONPATH
        value: "/opt/render/project/src/fetcher/python_packages:/opt/render/project/src/python_packages"
      - key: OPENAI_API_KEY
        sync: false

  - type: cron
    name: blivhort-ai-daily-scrape
    env: node
    schedule: "0 3 * * *"
    buildCommand: |
      set -e
      export PYTHONPATH="$PWD/python_packages"
      mkdir -p python_packages
      python3 -m pip install --no-cache-dir --no-warn-script-location --target python_packages setuptools==70.0.0 packaging wheel || true
      PUPPETEER_SKIP_DOWNLOAD=true npm install --no-audit --no-fund
      npm rebuild better-sqlite3 --update-binary || true
    command: |
      cd /opt/render/project/src && \
      node -e "
      const axios = require('axios');
      console.log('[JOB] Starting daily scrape job...');
      
      async function runDailyScrape() {
        try {
          const base = process.env.PUBLIC_URL || 'https://blivhort-ai.onrender.com';
          const resp = await axios.post(\`\${base}/api/run-daily-scrape\`, 
            { reason: 'scheduled_daily' }, 
            { validateStatus: () => true, timeout: 300000 }
          );
          console.log('[JOB] Daily scrape response:', resp.status, resp.data);
          
          // Wait for it to complete
          await new Promise(resolve => setTimeout(resolve, 60000));
          
          // Check database status
          const statusResp = await axios.get(\`\${base}/api/db-status\`);
          console.log('[JOB] Database status:', statusResp.data);
        } catch (e) {
          console.error('[JOB] Daily scrape failed:', e.message);
          process.exit(1);
        }
      }
      
      runDailyScrape().then(() => {
        console.log('[JOB] Daily scrape completed successfully');
        process.exit(0);
      }).catch(e => {
        console.error('[JOB] Fatal error:', e);
        process.exit(1);
      });
      "
    envVars:
      - key: NODE_ENV
        value: production
      - key: DB_PATH
        value: "/opt/render/project/src/fetcher/data/app.sqlite"
      - key: RENDER
        value: "true"
      - key: PUBLIC_URL
        value: "https://blivhort-ai.onrender.com"
      - key: PYTHONPATH
        value: "/opt/render/project/src/fetcher/python_packages:/opt/render/project/src/python_packages"
      - key: OPENAI_API_KEY
        sync: false